{"ast":null,"code":"// ACA hago la conexion entre el front y el back\nimport axios from 'axios'; // 12)\n// el componente Principal: va a hacer un get para todos los videojuegos:\n// export function getVideojuegos() {\n//     return function (dispatch) {\n//       // le pongo la ruta que me trae todos los personajes\n//       return fetch(`http://localhost:3001/videogames`)\n//         .then(response => response.json())\n//         .then(json => {\n//           dispatch({ type: \"GET_VIDEOJUEGOS\", payload: json });\n//         });\n//     };\n//   }\n// Importo todas las monedas\n\nexport function getCryptos() {\n  return async function (dispatch) {\n    try {\n      var json = await axios.get(\"https://api2.binance.com/api/v3/ticker/24hr\"); // LLAMO A LA API\n\n      const cryptos = json.data; //ME TRAIGO TODAS LAS MONEDAS\n      // ME QUEDO SOLAMENTE CON LAS CRYPTOS QUE TIENEN UN PRECIO DISTINTO DE 0\n\n      const cryptosok = cryptos.filter(f => f.lastPrice != \"0.00000000\"); // // FILTRO SOLO LOS QUE ESTAN EN USDT\n      // const usdt = cryptosok.filter((f)=> f.symbol.lastIndexOf('USDT')> 2  )\n      //   // ACA BUSCO LA MANERA DE LIMPIAR Y QUEDARME SOLO CON USD\n      // const usd = cryptosok.filter((f)=> f.symbol.lastIndexOf('USD')> 2 )\n      // const usdr = usd.filter((f) => f.symbol.lastIndexOf('USD')> 2 != f.symbol.lastIndexOf('USDT')> 2)\n      // const usdok = usdr.filter((f) => f.symbol.lastIndexOf('USD')> 2 != f.symbol.lastIndexOf('USDC')> 2)\n      // // usdokk son las cryptos en USD\n      // const usdokk = usdok.filter((f) => f.symbol.lastIndexOf('USD')> 2 != f.symbol.lastIndexOf('USDP')> 2)\n      //   // ACA ME TRAIGO LOS DEMÁS TIPOS DE CAMBIO QUE HAY\n      // const btc = cryptosok.filter((f) => f.symbol.lastIndexOf('BTC') > 2)\n      // const eth = cryptosok.filter((f) => f.symbol.lastIndexOf('ETH') > 2)\n      // const bnb = cryptosok.filter((f) => f.symbol.lastIndexOf('BNB') > 2)\n\n      return dispatch({\n        type: \"GET_CRYPTOS\",\n        name: cryptosok,\n        name2: cryptos\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n} // QUE ME TRAE LA MONEDA?\n// {\n//  X\"symbol\": \"ETHBTC\",   ----> SIMBOLO DE LA MONEDA\n//   \"priceChange\": \"-0.00452900\", -----> CAMBIO DEL PRECIO DURANTE LAS ULTIMAS 24 HS\n//  X\"priceChangePercent\": \"-6.195\", ---> PORCENTAJE DEL CAMBIO DEL PRECIO, EN LAS ULTIMAS 24 HS\n//   \"weightedAvgPrice\": \"0.07018839\",----> PRECIO PROMEDIO PONDERADO = RELACION ENTRE VALOR Y VOLUMEN\n//   \"prevClosePrice\": \"0.07311300\", ---> PRECIO DE CIERRE ANTERIOR\n//  X\"lastPrice\": \"0.06858400\",---> ULTIMO PRECIO\n//   \"lastQty\": \"0.04460000\",\n//   \"bidPrice\": \"0.06858800\",---> PRECIO DE OFERTA--Bid es el precio más alto que el comprador está dispuesto a pagar\n//   \"bidQty\": \"0.31870000\",---> CANTIDAD DE OFERTA,   la cantidad que el comprador está ofertando para comprar\n//   \"askPrice\": \"0.06858900\",---->PRECIO DE VENTA--el precio más bajo al que el vendedor está dispuesto a vender\n//   \"askQty\": \"0.24750000\",-----> CANTIDAD DE DEMANDA--> \n//  X\"openPrice\": \"0.07311300\",---> PRECIO DE APERTURA HACE 24 HS\n//  X\"highPrice\": \"0.07336300\",---> PRECIO MAS ALTO DURANTE LAS ULTIMAS 24HS\n//  X\"lowPrice\": \"0.06760000\",----> PRECIO MAS BAJO DURANTE LAS ULTIMAS 24 HS\n//   \"volume\": \"173068.90780000\",----> VOLUMEN TOTAL DURANTE LAS ULTIMAS 24 HS\n//   \"quoteVolume\": \"12147.42857589\",\n//   \"openTime\": 1642779616266,-->tiempo de apertura\n//   \"closeTime\": 1642866016266,-->tiempo de cierre, diferencia son 24 hs\n//   \"firstId\": 320737343,--> CANTIDAD DE TRANSACCIONES HACE 24 HORAS\n//   \"lastId\": 321096672,---> CANTIDAD DE TRANSACCIONES ACTUALES\n//   \"count\": 359330-----> NUMERO DE TRANSACCIONES DURANTE LAS ULTIMAS 24 HS\n//   },\n// DIFERENCIA ENTRE BIDPRICE Y ASKPRICE , SE LLAMA DIFERENCIA O MARGE DE COMPRAVENTA--> SPREAD\n//La cantidad total de oferta es el número total de acciones que tienen órdenes de compra pendientes. \n//La cantidad total solicitada o cantidad total ofertada es el número total de acciones pendientes de vender. \n//Verá que el precio de oferta siempre será más bajo que el precio de venta. Una vez que el precio de oferta y demanda coincida, se ejecuta la orden y esta cantidad se eliminará de la cantidad total de oferta y demanda.\n//   20)CREO UNA ACCION PARA EL FILTRADO SEGUN DB / API O CREADO\n\nexport const ordenXCreado = source => (dispatch, getState) => {\n  const videojuegos = getState().videojuegos.filter(function (v) {\n    // filtro los juegos que solo tienen el source que me llega x payload\n    return v.source === source;\n  });\n  dispatch({\n    type: \"ORDEN_X_CREADO\",\n    payload: {\n      videojuegos,\n      source\n    }\n  });\n}; //   21)\n\nexport const ordenAsc = type => (dispatch, getState) => {\n  const filtrado = getState().videojuegosFiltrados; // me traigo el estado \n\n  let videojuegosOrden = []; // declaro array vacio\n  // si el type que me pasan es asc_nombre\n\n  if (type === \"asc_nombre\") {\n    // agarro todos los juegos filtrados y los ordeno según el nombre\n    videojuegosOrden = filtrado.sort((a, b) => {\n      // sort compara 2 name, y los pone antes o despues del array\n      if (a.symbol > b.symbol) return 1;\n      if (a.symbol < b.symbol) return -1;\n      return 0;\n    }); // si el type es asc rating\n  } else if (type === \"asc_rating\") {\n    // sort compara 2 rating, y los pone antes o despues del array\n    videojuegosOrden = filtrado.sort((a, b) => a.lastPrice - b.lastPrice // dependiendo si es negativo o positivo el resultado, pone uno adelante y otro atrás\n    );\n  }\n\n  dispatch({\n    type: \"ORDEN_ASC_RATING\",\n    payload: {\n      videojuegosOrden,\n      name: type\n    }\n  });\n};\nexport const ordenDesc = type => (dispatch, getState) => {\n  const filtrado = getState().videojuegosFiltrados;\n  let videojuegosOrden = [];\n\n  if (type === \"desc_nombre\") {\n    videojuegosOrden = filtrado.sort((a, b) => {\n      // ordenamelo, pero en el sentido contrario\n      if (a.symbol < b.symbol) return 1;\n      if (a.symbol > b.symbol) return -1;\n      return 0;\n    });\n  } else if (type === \"desc_rating\") {\n    console.log('llego a esta action');\n    videojuegosOrden = filtrado.sort( // sort compara 2 rating, y los pone antes o despues del array\n    (a, b) => b.lastPrice - a.lastPrice);\n  }\n\n  dispatch({\n    type: \"ORDEN_DESC_RATING\",\n    payload: {\n      videojuegosOrden,\n      name: type\n    }\n  });\n}; // export function buscarVideojuegos(name) {\n//   return (dispatch)=>\n//     axios.get(`http://localhost:3001/videogames?name=${name}`)\n//     .then((response) =>{\n//       return ({type: \"BUSCAR_VIDEOJUEGOS\",\n//               payload:json})\n//     }).catch((err)=>{\n//       console.log(err)\n//     })\n// }\n\nexport const search = nombre => (dispatch, getState) => {\n  let Search = null;\n  console.log('se disparo', nombre);\n  const all = getState().cryptosok; // console.log(all, 'all')\n\n  Search = all.filter(f => f.symbol.includes(nombre.toUpperCase()));\n  console.log('devolucion', Search);\n  dispatch({\n    type: \"SEARCH_COIN\",\n    payload: Search\n  });\n};\nexport const getCoin = id => (dispatch, getState) => {\n  console.log('id', id);\n  let Detail = null;\n  const all = getState().cryptosok; // console.log(all, 'all')\n\n  Detail = all.filter(f => f.symbol.includes(id.toUpperCase()));\n  console.log('devolucion', Detail);\n  dispatch({\n    type: \"DETAIL_COIN\",\n    payload: Detail\n  });\n}; // acá recibo el genero seleccionado\n\nexport const filtradoXGenero = generos => (dispatch, getState) => {\n  let juegosFiltrados = null; // si el genero esta en all, me traigo todos los juegos y lo pongo en juegosfiltrados\n  // if (generos === \"All\") {\n  //   juegosFiltrados = getState().videojuegos;\n  // } else { // si esta en otra posicion que no sea all, filtrame los juegos segun el genero\n  //   juegosFiltrados = getState().videojuegos.filter((v) =>\n  //     (v.genres).includes(generos)\n  //   )\n  // };\n\n  console.log('se ejecuta esto:', generos);\n  const cryptosok = getState().cryptosok;\n\n  if (generos === \"busd\") {\n    console.log('llego acáaaa'); // ACA BUSCO LA MANERA DE LIMPIAR Y QUEDARME SOLO CON BUSD\n\n    const busd = cryptosok.filter(f => f.symbol.lastIndexOf('BUSD') > 2);\n    juegosFiltrados = busd;\n    console.log('juegos', juegosFiltrados);\n  }\n\n  if (generos === \"btc\") {\n    console.log('aqui estaaa btc');\n    juegosFiltrados = cryptosok.filter(f => f.symbol.lastIndexOf('BTC') > 2);\n  }\n\n  if (generos === \"eth\") {\n    console.log('aqui estaaa etc');\n    juegosFiltrados = cryptosok.filter(f => f.symbol.lastIndexOf('ETH') > 2);\n  }\n\n  if (generos === \"bnb\") {\n    console.log('aqui estaaa bnb');\n    juegosFiltrados = cryptosok.filter(f => f.symbol.lastIndexOf('BNB') > 2);\n  }\n\n  if (generos === \"usdt\") {\n    console.log('aqui estaaa usdt');\n    juegosFiltrados = cryptosok.filter(f => f.symbol.lastIndexOf('USDT') > 2);\n  }\n\n  dispatch({\n    type: \"FILTRADO_X_GENERO\",\n    payload: {\n      generos,\n      videojuegoGenero: juegosFiltrados\n    }\n  });\n};\nexport const resetTodo = () => {\n  return dispatch => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/glucero/Desktop/Movimiento/client/src/actions/index.js"],"names":["axios","getCryptos","dispatch","json","get","cryptos","data","cryptosok","filter","f","lastPrice","type","name","name2","err","console","log","ordenXCreado","source","getState","videojuegos","v","payload","ordenAsc","filtrado","videojuegosFiltrados","videojuegosOrden","sort","a","b","symbol","ordenDesc","search","nombre","Search","all","includes","toUpperCase","getCoin","id","Detail","filtradoXGenero","generos","juegosFiltrados","busd","lastIndexOf","videojuegoGenero","resetTodo"],"mappings":"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","sourcesContent":["// ACA hago la conexion entre el front y el back\nimport axios from 'axios';\n\n// 12)\n// el componente Principal: va a hacer un get para todos los videojuegos:\n\n// export function getVideojuegos() {\n//     return function (dispatch) {\n//       // le pongo la ruta que me trae todos los personajes\n//       return fetch(`http://localhost:3001/videogames`)\n//         .then(response => response.json())\n//         .then(json => {\n//           dispatch({ type: \"GET_VIDEOJUEGOS\", payload: json });\n//         });\n//     };\n//   }\n\n// Importo todas las monedas\nexport function getCryptos(){\n  return async function(dispatch){\n    try{\n      var json = await axios.get(\"https://api2.binance.com/api/v3/ticker/24hr\") // LLAMO A LA API\n      const cryptos =json.data //ME TRAIGO TODAS LAS MONEDAS\n      \n      // ME QUEDO SOLAMENTE CON LAS CRYPTOS QUE TIENEN UN PRECIO DISTINTO DE 0\n      const cryptosok = cryptos.filter((f) => f.lastPrice != \"0.00000000\") \n\n      // // FILTRO SOLO LOS QUE ESTAN EN USDT\n      // const usdt = cryptosok.filter((f)=> f.symbol.lastIndexOf('USDT')> 2  )\n      //   // ACA BUSCO LA MANERA DE LIMPIAR Y QUEDARME SOLO CON USD\n      // const usd = cryptosok.filter((f)=> f.symbol.lastIndexOf('USD')> 2 )\n      // const usdr = usd.filter((f) => f.symbol.lastIndexOf('USD')> 2 != f.symbol.lastIndexOf('USDT')> 2)\n      // const usdok = usdr.filter((f) => f.symbol.lastIndexOf('USD')> 2 != f.symbol.lastIndexOf('USDC')> 2)\n      // // usdokk son las cryptos en USD\n      // const usdokk = usdok.filter((f) => f.symbol.lastIndexOf('USD')> 2 != f.symbol.lastIndexOf('USDP')> 2)\n      //   // ACA ME TRAIGO LOS DEMÁS TIPOS DE CAMBIO QUE HAY\n      // const btc = cryptosok.filter((f) => f.symbol.lastIndexOf('BTC') > 2)\n      // const eth = cryptosok.filter((f) => f.symbol.lastIndexOf('ETH') > 2)\n      // const bnb = cryptosok.filter((f) => f.symbol.lastIndexOf('BNB') > 2)\n      return dispatch({\n        type:  \"GET_CRYPTOS\",        \n        name: cryptosok,\n        name2:cryptos\n      })\n    }catch(err){\n      console.log(err)\n    }\n  }\n}\n\n// QUE ME TRAE LA MONEDA?\n\n// {\n//  X\"symbol\": \"ETHBTC\",   ----> SIMBOLO DE LA MONEDA\n//   \"priceChange\": \"-0.00452900\", -----> CAMBIO DEL PRECIO DURANTE LAS ULTIMAS 24 HS\n//  X\"priceChangePercent\": \"-6.195\", ---> PORCENTAJE DEL CAMBIO DEL PRECIO, EN LAS ULTIMAS 24 HS\n//   \"weightedAvgPrice\": \"0.07018839\",----> PRECIO PROMEDIO PONDERADO = RELACION ENTRE VALOR Y VOLUMEN\n//   \"prevClosePrice\": \"0.07311300\", ---> PRECIO DE CIERRE ANTERIOR\n//  X\"lastPrice\": \"0.06858400\",---> ULTIMO PRECIO\n//   \"lastQty\": \"0.04460000\",\n//   \"bidPrice\": \"0.06858800\",---> PRECIO DE OFERTA--Bid es el precio más alto que el comprador está dispuesto a pagar\n//   \"bidQty\": \"0.31870000\",---> CANTIDAD DE OFERTA,   la cantidad que el comprador está ofertando para comprar\n//   \"askPrice\": \"0.06858900\",---->PRECIO DE VENTA--el precio más bajo al que el vendedor está dispuesto a vender\n//   \"askQty\": \"0.24750000\",-----> CANTIDAD DE DEMANDA--> \n//  X\"openPrice\": \"0.07311300\",---> PRECIO DE APERTURA HACE 24 HS\n//  X\"highPrice\": \"0.07336300\",---> PRECIO MAS ALTO DURANTE LAS ULTIMAS 24HS\n//  X\"lowPrice\": \"0.06760000\",----> PRECIO MAS BAJO DURANTE LAS ULTIMAS 24 HS\n//   \"volume\": \"173068.90780000\",----> VOLUMEN TOTAL DURANTE LAS ULTIMAS 24 HS\n//   \"quoteVolume\": \"12147.42857589\",\n//   \"openTime\": 1642779616266,-->tiempo de apertura\n//   \"closeTime\": 1642866016266,-->tiempo de cierre, diferencia son 24 hs\n//   \"firstId\": 320737343,--> CANTIDAD DE TRANSACCIONES HACE 24 HORAS\n//   \"lastId\": 321096672,---> CANTIDAD DE TRANSACCIONES ACTUALES\n//   \"count\": 359330-----> NUMERO DE TRANSACCIONES DURANTE LAS ULTIMAS 24 HS\n//   },\n\n// DIFERENCIA ENTRE BIDPRICE Y ASKPRICE , SE LLAMA DIFERENCIA O MARGE DE COMPRAVENTA--> SPREAD\n//La cantidad total de oferta es el número total de acciones que tienen órdenes de compra pendientes. \n//La cantidad total solicitada o cantidad total ofertada es el número total de acciones pendientes de vender. \n//Verá que el precio de oferta siempre será más bajo que el precio de venta. Una vez que el precio de oferta y demanda coincida, se ejecuta la orden y esta cantidad se eliminará de la cantidad total de oferta y demanda.\n\n\n//   20)CREO UNA ACCION PARA EL FILTRADO SEGUN DB / API O CREADO\n  \n  export const ordenXCreado = (source) => (dispatch, getState) => {\n    const videojuegos = getState().videojuegos.filter(function (v) { // filtro los juegos que solo tienen el source que me llega x payload\n        return v.source === source\n      });\n    dispatch({\n      type: \"ORDEN_X_CREADO\",\n      payload: {\n        videojuegos,\n        source,\n      },\n    });\n  };\n\n//   21)\nexport const ordenAsc = (type) => (dispatch, getState) => {\n    const filtrado = getState().videojuegosFiltrados; // me traigo el estado \n    let videojuegosOrden = [] // declaro array vacio\n  \n    // si el type que me pasan es asc_nombre\n      if (type === \"asc_nombre\") {\n        // agarro todos los juegos filtrados y los ordeno según el nombre\n        videojuegosOrden = filtrado.sort((a, b) => { // sort compara 2 name, y los pone antes o despues del array\n          if (a.symbol > b.symbol) return 1;\n          if (a.symbol < b.symbol) return -1;\n          return 0;\n        });\n        // si el type es asc rating\n      } else if (type === \"asc_rating\") { // sort compara 2 rating, y los pone antes o despues del array\n        \n        videojuegosOrden = filtrado.sort(\n          (a, b) => a.lastPrice - b.lastPrice // dependiendo si es negativo o positivo el resultado, pone uno adelante y otro atrás\n        );\n        \n      }\n      dispatch({\n        type: \"ORDEN_ASC_RATING\",\n        payload: {\n          videojuegosOrden,\n          name: type,\n        },\n      });\n  }\n  \n  \n  export const ordenDesc = (type) => (dispatch, getState) => {\n    const filtrado = getState().videojuegosFiltrados;\n    let videojuegosOrden = []\n      \n      if (type === \"desc_nombre\") {\n        \n        videojuegosOrden = filtrado.sort((a, b) => { // ordenamelo, pero en el sentido contrario\n          if (a.symbol < b.symbol) return 1;\n          if (a.symbol > b.symbol) return -1;\n          return 0;\n        });\n      } else if (type === \"desc_rating\") { \n        console.log('llego a esta action')  \n        videojuegosOrden = filtrado.sort( // sort compara 2 rating, y los pone antes o despues del array\n          (a, b) => b.lastPrice - a.lastPrice\n        );\n      }\n      dispatch({\n        type: \"ORDEN_DESC_RATING\",\n        payload: {\n          videojuegosOrden,\n          name: type,\n        },\n      });\n  }\n\n\n\n  // export function buscarVideojuegos(name) {\n  //   return (dispatch)=>\n  //     axios.get(`http://localhost:3001/videogames?name=${name}`)\n  //     .then((response) =>{\n  //       return ({type: \"BUSCAR_VIDEOJUEGOS\",\n  //               payload:json})\n  //     }).catch((err)=>{\n  //       console.log(err)\n  //     })\n    \n  // }\n\n\n\n\n  export const search = (nombre) => (dispatch, getState) => {\n    let Search = null\n    console.log('se disparo', nombre)\n    const all = getState().cryptosok;\n    // console.log(all, 'all')\n    \n    Search = all.filter((f) => f.symbol.includes(nombre.toUpperCase()))\n     console.log('devolucion',Search)\n      dispatch({\n        type: \"SEARCH_COIN\",\n        payload:Search,\n      });\n  }\n\n  export const getCoin = (id) => (dispatch, getState) => {\n    console.log('id',id)\n    let Detail = null\n    const all = getState().cryptosok;\n    // console.log(all, 'all')\n    \n    Detail = all.filter((f) => f.symbol.includes(id.toUpperCase()))\n     console.log('devolucion',Detail)\n      dispatch({\n        type: \"DETAIL_COIN\",\n        payload:Detail,\n      });\n  }\n\n\n  // acá recibo el genero seleccionado\n  export const filtradoXGenero = (generos) => (dispatch, getState) => {\n    let juegosFiltrados = null;\n    // si el genero esta en all, me traigo todos los juegos y lo pongo en juegosfiltrados\n    // if (generos === \"All\") {\n    //   juegosFiltrados = getState().videojuegos;\n    // } else { // si esta en otra posicion que no sea all, filtrame los juegos segun el genero\n    //   juegosFiltrados = getState().videojuegos.filter((v) =>\n    //     (v.genres).includes(generos)\n    //   )\n    // };\n    console.log('se ejecuta esto:',generos)\n    const cryptosok = getState().cryptosok\n    if(generos === \"busd\"){\n      console.log('llego acáaaa')\n     \n        // ACA BUSCO LA MANERA DE LIMPIAR Y QUEDARME SOLO CON BUSD\n        const busd = cryptosok.filter((f)=> f.symbol.lastIndexOf('BUSD')> 2 )\n        juegosFiltrados = busd;\n        console.log('juegos', juegosFiltrados)\n    }\n    if(generos === \"btc\"){\n      console.log('aqui estaaa btc')\n      juegosFiltrados = cryptosok.filter((f) => f.symbol.lastIndexOf('BTC') > 2)\n    }\n    if(generos === \"eth\"){\n      console.log('aqui estaaa etc')\n      juegosFiltrados = cryptosok.filter((f) => f.symbol.lastIndexOf('ETH') > 2)\n    }\n    if(generos === \"bnb\"){\n      console.log('aqui estaaa bnb')\n      juegosFiltrados = cryptosok.filter((f) => f.symbol.lastIndexOf('BNB') > 2)\n    }\n    if(generos === \"usdt\"){\n      console.log('aqui estaaa usdt')\n    juegosFiltrados = cryptosok.filter((f)=> f.symbol.lastIndexOf('USDT')> 2  )\n  }\n    dispatch({\n      type: \"FILTRADO_X_GENERO\",\n      payload: {\n        generos,\n        videojuegoGenero: juegosFiltrados,\n      },\n    });\n  };\n\n\n  export const resetTodo = () => {\n  return (dispatch) => {\n    dispatch({\n      type: \"RESET\",\n    });\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}